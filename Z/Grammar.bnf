// George Corbin github.com/GeorgeCorbin/Programming-Languages/blob/main/Z/README.md

program ::= statementList?

statementList ::= statement*

statement ::= functionCall
        | initialization
        | incrementExpression
        | assignment
        | functionDefinition
        | loop
        | conditional

//expression ::= primary
//		| unary
//		| binary

expressionList ::= expression
                | expression "," expressionList

expression ::= orTerm (("||" | "or") expression)*
orTerm ::= equalityTerm (("&&" | "and") orTerm)*
equalityTerm ::= relationalTerm (("==" | "equals" | "!=" | "notequal") equalityTerm)*
relationalTerm ::= powerTerm ((">" | "greaterthan" | ">=" | "greaterthanequal" | "<" | "lessthan" | "<=" | "lessthanequal") relationalTerm)*
powerTerm ::= term ("^" powerTerm)*
term ::= factor (("+" | "-") term)*
factor ::= unaryTerm (("*" | "/" | "%") factor)*
unaryTerm ::= ("++" | "--" ) IDENTIFIER
              | IDENTIFIER ("++" | "--" )
              | simpleTerm (("+" | "-") | unaryTerm)*
simpleTerm ::= IDENTIFIER | literal | "(" expression ")"

booleanLiteral ::= "true" | "false"

arrayReference ::= IDENTIFIER "[" expression "]"

dataType ::= "String" | "int" | "float" | arrayType

arrayType ::= "[" dataType "]"

literal ::= NUMBER | booleanLiteral | STRING

incrementExpression ::= IDENTIFIER incrementOperators
                        | incrementOperators IDENTIFIER

incrementOperators ::= "++" | "--"

functionDefinition ::= "func" IDENTIFIER "(" functionParameterList? ")" ["->" functionReturnType] "{" statementList "}"

functionParameterList ::= functionParameter ["," functionParameterList]

functionParameter ::= IDENTIFIER ":" dataType

functionReturnType ::= dataType | "Void"

functionCall ::= IDENTIFIER "(" argumentList? ")"

argumentList ::= [IDENTIFIER ":"] expression [ "," argumentList ]

initialization ::= variableInitializer | constantInitializer

variableInitializer ::= "var" IDENTIFIER ":" dataType
                    | "var" IDENTIFIER ":" dataType "=" initializerExpression
                    | "var" IDENTIFIER "=" initializerExpression

constantInitializer ::= "const" IDENTIFIER [":" dataType] "=" initializerExpression

initializerExpression ::= expression | arrayInitializer

arrayInitializer ::= "[" expressionList? "]"

assignment ::= arrayReference assignmentOperator expression
               	| IDENTIFIER assignmentOperator expression

assignmentOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^="

loop ::= forLoop | forIn | whileLoop

forLoop ::= "for" "(" assignment? ";" expression? ";" loopIncrement? ")" "{" statementList "}"

loopIncrement ::= assignment | incrementExpression

forIn ::= "for" IDENTIFIER "in" iterable "{" statementList "}"

iterable ::= range | IDENTIFIER

range ::= expression "..." expression

whileLoop ::= "while" "(" expression ")" "{" statementList "}"

conditional ::= ifElseStatements | switchCaseStatements

ifElseStatements ::= ifStatement elseifStatement* elseStatement?

ifStatement ::= "if" "(" expression ")" "{" statementList "}"
            | "if" expression "{" statementList "}"

elseStatement ::= "else" "{" statementList "}"

elseifStatement ::= "else" ifStatement

switchCaseStatements ::= switchStatement "{" caseStatement+ "}"

switchStatement ::= "switch" "(" expression ")"
                | "switch" expression

caseStatement ::= "case" expression ":" statementList
                | "default" ":" statementList
